@model  Demo.Models.TeamDetailModel

<link href="https://fonts.googleapis.com/css?family=Raleway" rel="stylesheet">
<script src="~/Scripts/jquery-3.4.1.js"></script>
<script src="~/Scripts/jquery-3.4.1.min.js"></script>

<style>
    * {
        box-sizing: border-box;
    }

    body {
        background-color: #f1f1f1;
    }

    #teamDetailForm {
        background-color: #ffffff;
        margin: 100px auto;
        font-family: Raleway;
        padding: 40px;
        width: 70%;
        min-width: 300px;
    }

    h1 {
        text-align: center;
    }

    input {
        padding: 10px;
        width: 100%;
        font-size: 17px;
        font-family: Raleway;
        border: 1px solid #aaaaaa;
    }

        /* Mark input boxes that gets an error on validation: */
        input.invalid {
            background-color: #ffdddd;
        }

    /* Hide all steps by default: */
    .tab {
        display: none;
    }

    button {
        background-color: #04AA6D;
        color: #ffffff;
        border: none;
        padding: 10px 20px;
        font-size: 17px;
        font-family: Raleway;
        cursor: pointer;
    }

        button:hover {
            opacity: 0.8;
        }

    #prevBtn {
        background-color: #bbbbbb;
    }

    /* Make circles that indicate the steps of the form: */
    .step {
        height: 15px;
        width: 15px;
        margin: 0 2px;
        background-color: #bbbbbb;
        border: none;
        border-radius: 50%;
        display: inline-block;
        opacity: 0.5;
    }

        .step.active {
            opacity: 1;
        }

        /* Mark the steps that are finished and valid: */
        .step.finish {
            background-color: #04AA6D;
        }
</style>

<body>   
        <form id="teamDetailForm" action="@Url.Action("TeamDetail","Detail")" enctype = "multipart/form-data" method="post">
            <h1>Details:</h1>
            <!-- One "tab" for each step in the form: -->
            <div class="tab">

                Personal Details :

                <div class="form-group">
                    <p><img id="output" width="200" /></p>
                    <input type="file" name="postedFile" accept="image/*" onchange="loadFile(event)" />
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.FirstName)
                    @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control", required = true })
                    @Html.ValidationMessageFor(m => m.FirstName, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.LastName)
                    @Html.TextBoxFor(m => m.LastName, new { @class = "form-control", required = true })
                    @Html.ValidationMessageFor(m => m.LastName)
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.BirthDate)
                    @Html.TextBoxFor(m => m.BirthDate, new { @class = "form-control datepicker", @type = "date", required = true })
                    @Html.ValidationMessageFor(m => m.BirthDate)
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Phone)
                    @Html.TextBoxFor(m => m.Phone, new { @class = "form-control", @type = "number", required = true })
                    <span id="error-phone" class="text-danger"></span>
                    @Html.ValidationMessageFor(m => m.Phone)
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Email)
                    @Html.TextBoxFor(m => m.Email, new { @class = "form-control", required = true, @type = "Email" })
                    @Html.ValidationMessageFor(m => m.Email)
                    <span id="error-email-invalid" class="text-danger"></span>
                </div>
                
            </div>
            <div class="tab">
                Bank Details:
                <div class="form-group">
                    @Html.LabelFor(m => m.AccountNo)
                    @Html.TextBoxFor(m => m.AccountNo, new { @class = "form-control" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.IFSC)
                    @Html.TextBoxFor(m => m.IFSC, new { @class = "form-control" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.PanCardNo)
                    @Html.TextBoxFor(m => m.PanCardNo, new { @class = "form-control" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.AadharCardNo)
                    @Html.TextBoxFor(m => m.AadharCardNo, new { @class = "form-control" })
                </div>

            </div>
            <div class="tab">
                Professional Details:

                <div class="form-group">
                    <input type="file" name="postedResumeFile" />
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Years)
                    @Html.TextBoxFor(m => m.Years, new { @class = "form-control" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Months)
                    @Html.TextBoxFor(m => m.Months, new { @class = "form-control" })
                </div>

            </div>
            <div class="tab">
                Login Info:

                <div class="form-group">
                    @Html.LabelFor(m => m.LastName)
                    @Html.TextBoxFor(m => m.LastName, new { @class = "form-control", required = true })
                    @Html.ValidationMessageFor(m => m.LastName)
                </div>

            </div>
            <div style="overflow:auto;">
                <div style="float:right;">
                    <button type="button" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                    <button type="button" id="nextBtn" onclick="nextPrev(1)">Next</button>
                </div>
            </div>
            <!-- Circles which indicates the steps of the form: -->
            <div style="text-align:center;margin-top:40px;">
                <span class="step"></span>
                <span class="step"></span>
                <span class="step"></span>
                <span class="step"></span>
            </div>
</form>
    </body>

<script>

    var loadFile = function (event) {
        var image = document.getElementById('output');
        image.src = URL.createObjectURL(event.target.files[0]);
    };

    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the current tab

    function showTab(n) {
        // This function will display the specified tab of the form...
        var x = document.getElementsByClassName("tab");
        x[n].style.display = "block";
        //... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            document.getElementById("nextBtn").innerHTML = "Submit";
        } else {
            document.getElementById("nextBtn").innerHTML = "Next";
        }
        //... and run a function that will display the correct step indicator:
        fixStepIndicator(n)
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("tab");
        // Exit the function if any field in the current tab is invalid:


        if (n == 1 && !validateForm()) return false;


        // Hide the current tab:
        x[currentTab].style.display = "none";
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;
        // if you have reached the end of the form...
        if (currentTab >= x.length) {
            // ... the form gets submitted:
            $('#teamDetailForm').submit();
       
            return false;
        }
        // Otherwise, display the correct tab:
        showTab(currentTab);
    }

    function validateForm() {
        // This function deals with validation of the form fields
        var x, y, i, valid = true;
        x = document.getElementsByClassName("tab");
        y = x[currentTab].getElementsByTagName("input");
        // A loop that checks every input field in the current tab:
        for (i = 0; i < y.length; i++) {
            // If a field is empty...
            if (y[i].value == "") {
                // add an "invalid" class to the field:
                y[i].className += " invalid";
                // and set the current valid status to false
                valid = false;
            }
        }
        // If the valid status is true, mark the step as finished and valid:
        if (valid) {
            document.getElementsByClassName("step")[currentTab].className += " finish";
        }
        return valid; // return the valid status
    }

    function fixStepIndicator(n) {
        // This function removes the "active" class of all steps...
        var i, x = document.getElementsByClassName("step");
        for (i = 0; i < x.length; i++) {
            x[i].className = x[i].className.replace(" active", "");
        }
        //... and adds the "active" class on the current step:
        x[n].className += " active";
    }
</script>
