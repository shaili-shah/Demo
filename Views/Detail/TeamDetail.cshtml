@model  Demo.Models.TeamDetailModel

<link href="https://fonts.googleapis.com/css?family=Raleway" rel="stylesheet">
<script src="~/Scripts/jquery-3.4.1.js"></script>
<script src="~/Scripts/jquery-3.4.1.min.js"></script>

<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

<!-- Include Bootstrap Datepicker -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js"></script>

<style>
    * {
        box-sizing: border-box;
    }

    body {
        background-color: #f1f1f1;
    }

    #teamDetailForm {
        background-color: #ffffff;
        margin: 100px auto;
        font-family: Raleway;
        padding: 40px;
        width: 70%;
        min-width: 300px;
    }

    h1 {
        text-align: center;
    }

    input {
        padding: 10px;
        width: 100%;
        font-size: 17px;
        font-family: Raleway;
        border: 1px solid #aaaaaa;
    }

        /* Mark input boxes that gets an error on validation: */
        input.invalid {
            background-color: #ffdddd;
        }

    /* Hide all steps by default: */
    .tab {
        display: none;
    }

    button {
        background-color: #04AA6D;
        color: #ffffff;
        border: none;
        padding: 10px 20px;
        font-size: 17px;
        font-family: Raleway;
        cursor: pointer;
    }

        button:hover {
            opacity: 0.8;
        }

    #prevBtn {
        background-color: #bbbbbb;
    }

    /* Make circles that indicate the steps of the form: */
    .step {
        height: 15px;
        width: 15px;
        margin: 0 2px;
        background-color: #bbbbbb;
        border: none;
        border-radius: 50%;
        display: inline-block;
        opacity: 0.5;
    }

        .step.active {
            opacity: 1;
        }

        /* Mark the steps that are finished and valid: */
        .step.finish {
            background-color: #04AA6D;
        }

    .set-btn {
        margin-left: 26%;
        margin-top: 10px;
        margin-bottom: 20px;
    }

    .set-table {
        margin-top: 20px;
        padding-top: 20px;
        padding-left: 20px;
        margin-bottom: 20px;
    }

    .removeButton {
        width: 15%;
        float: right;
        margin-right: 10px;
    }
    .exit-btn {
        background-color: #3a3636;
        color: #ffffff;
        border: none;
        padding: 10px 20px;
        font-size: 17px;
        font-family: Raleway;
        cursor: pointer;
    }

    a:hover, a:focus {
        opacity: 0.8;
        color: white;
        text-decoration: none;
    }

</style>

<body>
    <form id="teamDetailForm" action="@Url.Action("TeamDetail","Detail")" enctype="multipart/form-data" method="post">
        @*<h1>Details:</h1>*@
        <!-- One "tab" for each step in the form: -->
        <div class="tab">
            <h1> Personal Details :</h1>

            <div class="form-group">
                <p><img id="output" width="200" src="@ViewBag.ImageBase64" /></p>
                <input type="file" name="postedFile" accept="image/*" onchange="ValidateSingleInput(this);" />
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.FirstName)
                @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control", required = true })
                @Html.ValidationMessageFor(m => m.FirstName, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.LastName)
                @Html.TextBoxFor(m => m.LastName, new { @class = "form-control", required = true })
                @Html.ValidationMessageFor(m => m.LastName, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.BirthDate)
                @Html.TextBoxFor(m => m.BirthDate, "{0:MM/dd/yyyy}", new
                {
                    @class = "form-control datepicker",
                    required = true
})


                @Html.ValidationMessageFor(m => m.BirthDate, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.Phone)
                @Html.TextBoxFor(m => m.Phone, new { @class = "form-control", @type = "number", required = true, min = 0 })
                <span id="error-phone" class="text-danger"></span>
                @Html.ValidationMessageFor(m => m.Phone, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.Email)
                @Html.TextBoxFor(m => m.Email, new { @class = "form-control", required = true, @type = "Email" })
                @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                <span id="error-email-invalid" class="text-danger"></span>
            </div>

        </div>
        <div class="tab">
            <h1> Bank Details :</h1>
            @Html.HiddenFor(m => m.BankDetailId)
            <div class="form-group">
                @Html.LabelFor(m => m.AccountNo)
                @Html.TextBoxFor(m => m.AccountNo, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.AccountNo, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.IFSC)
                @Html.TextBoxFor(m => m.IFSC, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.IFSC, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.PanCardNo)
                @Html.TextBoxFor(m => m.PanCardNo, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.PanCardNo, "", new { @class = "text-danger" })
                <span id="error-pancard" class="text-danger"></span>
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.AadharCardNo)
                @Html.TextBoxFor(m => m.AadharCardNo, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.AadharCardNo, "", new { @class = "text-danger" })
                <span id="error-aadharcard" class="text-danger"></span>
            </div>

        </div>
        <div class="tab">
            <h1> Professional Details :</h1>
            @Html.HiddenFor(m => m.ProfessionalDetailId)
            <div class="form-group">
                <embed src="@ViewBag.ResumeBase64" width="350" height="250" alt="pdf" pluginspage="http://www.adobe.com/products/acrobat/readstep2.html">
                <input type="file" name="postedResumeFile" />
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.Year)
                @Html.TextBoxFor(m => m.Year, new { @class = "form-control", @type = "number", @min = 0 })
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.Month)
                @Html.TextBoxFor(m => m.Month, new { @class = "form-control", @type = "number", @min = 0 })
            </div>

            <div class="form-group">
                <label>Skills</label> <br>
                @Html.DropDownListFor(x => x.SkillIds, new SelectList(ViewBag.LstSkills, "Id", "Name"), new { @class = "js-example-basic-multiple form-control", multiple = "multiple" })
            </div>

        </div>
        <div class="tab">
            <h1>  Current Status:</h1>
            @Html.HiddenFor(m => m.CurrentStatusId)
            <div class="form-group">
                @Html.LabelFor(m => m.Company)
                @Html.TextBoxFor(m => m.Company, new { @class = "form-control", @Value = "Albiorix Technology Private Limited", @readonly = "readonly" })
                @Html.ValidationMessageFor(m => m.Company, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.Designation)
                @Html.TextBoxFor(m => m.Designation, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Designation, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.Department)
                @Html.TextBoxFor(m => m.Department, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Department, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.CTC)
                @Html.TextBoxFor(m => m.CTC, new { @class = "form-control" })
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.WorkingFrom)
                @Html.TextBoxFor(m => m.WorkingFrom, "{0:MM/dd/yyyy}", new { @class = "form-control datepicker" })
                @Html.ValidationMessageFor(m => m.WorkingFrom, "", new { @class = "text-danger" })
            </div>

        </div>

        <div class="tab">

            <h1> Exprience Details:</h1>
            <input type="button" id="btnAdd" value="Add New Exprience" class="btn btn-primary set-btn" />

            <div id="container">

                @if (Model.Id > 0 && Model != null)
                {
                    int i = 0;
                    foreach (var item in Model.LstExprienceDetailModel)
                    {

                        <div class="table-bordered set-table">

                            <input type="hidden" id="LstExprienceDetailModel_@(i)__Id" class="iHidden" name="LstExprienceDetailModel[@i].Id" value="@item.Id">

                            <input type="button" value="remove" class="removeButton btn btn-danger">

                            <div class="form-group">
                                <label>Company</label>
                                <input type='text' class="form-control" id='LstExprienceDetailModel_@(i)__Company' name='LstExprienceDetailModel[@i].Company' value="@item.Company" />
                            </div>

                            <div class="form-group">
                                <label>Designation</label>
                                <input type='text' class="form-control" id='LstExprienceDetailModel_@(i)__Designation' name='LstExprienceDetailModel[@i].Designation' value="@item.Designation" />
                            </div>

                            <div class="form-group">
                                <label>Department</label>
                                <input type='text' class="form-control" id='LstExprienceDetailModel_@(i)__Department' name='LstExprienceDetailModel[@i].Department' value="@item.Department" />
                            </div>

                            <div class="form-group">
                                <label>CTC</label>
                                <input type='text' class="form-control" id='LstExprienceDetailModel_@(i)__CTC' name='LstExprienceDetailModel[@i].CTC' value="@item.CTC" />
                            </div>

                            <div class="form-group">
                                <label>From</label>
                                @if (item.From.HasValue)
                                {
                                    <input type='text' class="form-control datepicker" id='LstExprienceDetailModel_@(i)__From' name='LstExprienceDetailModel[@i].From' value="@item.From.Value.ToString("MM/dd/yyyy")" />
                                }
                                else
                                {
                                    <input type='text' class="form-control datepicker" id='LstExprienceDetailModel_@(i)__From' name='LstExprienceDetailModel[@i].From' value="" />
                                }
                            </div>

                            <div class="form-group">
                                <label>To</label>
                                @if (item.To.HasValue)
                                {
                                    <input type='text' class="form-control datepicker" id='LstExprienceDetailModel_@(i)__To' name='LstExprienceDetailModel[@i].To' value="@item.To.Value.ToString("MM/dd/yyyy")" />
                                }
                                else
                                {
                                    <input type='text' class="form-control datepicker" id='LstExprienceDetailModel_@(i)__To' name='LstExprienceDetailModel[@i].To' value="" />
                                }
                            </div>

                        </div>


                        i++;


                    }
                }
            </div>

        </div>

        <div class="tab">
            <h1> Education Details:</h1>
            <input type="button" id="btnAddEducation" value="Add New Education" class="btn btn-primary set-btn" />

            <div id="container-education">

                @if (Model.Id > 0)
                {
                    int i = 0;
                    foreach (var item in Model.LstEducationDetailModel)
                    {

                        <div class="table-bordered set-table">

                            <input type="hidden" id="LstEducationDetailModel_@(i)__Id" class="iHidden" name="LstEducationDetailModel[@i].Id" value="@item.Id">

                            <input type="button" value="remove" class="removeButton btn btn-danger">

                            <div class="form-group">
                                <label>Course</label>
                                <input type='text' class="form-control" id='LstEducationDetailModel_@(i)__Course' name='LstEducationDetailModel[@i].Course' value="@item.Course" />
                            </div>

                            <div class="form-group">
                                <label>University</label>
                                <input type='text' class="form-control" id='LstEducationDetailModel_@(i)__University' name='LstEducationDetailModel[@i].University' value="@item.University" />
                            </div>

                            <div class="form-group">
                                <label>Passed On</label>
                                <input type='text' class="form-control datepicker" id='LstEducationDetailModel_@(i)__PassedOn' name='LstEducationDetailModel[@i].PassedOn' value="@item.PassedOn.ToString("MM/dd/yyyy")" />
                            </div>

                            <div class="form-group">
                                <label>Grade</label>
                                <input type='text' class="form-control" id='LstEducationDetailModel_@(i)__Grade' name='LstEducationDetailModel[@i].Grade' value="@item.Grade" />
                            </div>
                        </div>

                        i++;


                    }
                }

            </div>

        </div>

       <p class="text-danger"> @ViewBag.errorMsg</p>

        <div style="overflow:auto;">
            <div style="float:right;">
                <button type="button" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                <a class="button exit-btn" href="@(Url.Action("Index","Detail"))">Exit</a>
                <button type="button" id="nextBtn" onclick="nextPrev(1)">Next</button>
            </div>
        </div>
        <!-- Circles which indicates the steps of the form: -->
        <div style="text-align:center;margin-top:40px;">
            <span class="step"></span>
            <span class="step"></span>
            <span class="step"></span>
            <span class="step"></span>
            <span class="step"></span>
            <span class="step"></span>
        </div>
    </form>
</body>

<script>

    $('.datepicker').datepicker({
        endDate: 'today',
        autoclose: true,
        todayHighlight: true
    });


    $("#SkillIds").select2({
        width: "200"
    });

    if (@Model.SkillIds.Count > 0) {
        var selectedSkillId = @Html.Raw(Json.Encode(Model.SkillIds));
         $("#SkillIds").val(selectedSkillId).trigger("change");
    }

    var now = new Date(),
    currentDate = now.toISOString().substring(0, 10);
    $('#BirthDate').prop('max', currentDate);
    $('#WorkingFrom').prop('max', currentDate);

    var number = document.getElementById('Phone');
    number.onkeydown = function (e) {
        if (!((e.keyCode > 95 && e.keyCode < 106)
            || (e.keyCode > 47 && e.keyCode < 58)
            || e.keyCode == 8)) {
            return false;
        }
    }

    $("#Phone").on('change', function () {
        if ($("#Phone").val().length != 10) {
            $("#error-phone").text("Invalid");
        } else {
            $("#error-phone").text("");
        }
    });

    $("#PanCardNo").change(function () {
        $("#error-pancard").text("");
            var inputvalues = $(this).val();
            var regex = /[A-Z]{5}[0-9]{4}[A-Z]{1}$/;
            if (!regex.test(inputvalues)) {
                $(".pan").val("");
                $("#error-pancard").text("Invalid");
                return regex.test(inputvalues);
            }
    });

    $("#AadharCardNo").change(function () {
        $("#error-aadharcard").text("");
        var regex = /(^[0-9]{4}[0-9]{4}[0-9]{4}$)|(^[0-9]{4}\s[0-9]{4}\s[0-9]{4}$)|(^[0-9]{4}-[0-9]{4}-[0-9]{4}$)/;
        if (!regex.test($("#AadharCardNo").val())) {
            $("#error-aadharcard").text("Invalid");
        }
    });


    $(function () {
        $("#btnAdd").click(function (e) {

        var itemIndex = $("#container input.iHidden").length;
            e.preventDefault();

        $.get("@Url.Action("NewExprienceDetailRow", "Detail")/"+itemIndex,function(data){
            $("#container").append(data);
        });
    });
    });


     $(function () {
         $("#btnAddEducation").click(function (e) {

            var itemIndex = $("#container-education input.iHidden").length;
            e.preventDefault();

        $.get("@Url.Action("NewEducationDetailRow", "Detail")/"+itemIndex,function(data){
            $("#container-education").append(data);
        });
    });
  });

    $(document).on('click', '.removeButton', function () {
        $(this).closest('div.table-bordered').remove();
    });

    var _validFileExtensions = [".jpg", ".jpeg", ".png"];
    function ValidateSingleInput(oInput) {
        if (oInput.type == "file") {
            var sFileName = oInput.value;
            if (sFileName.length > 0) {
                var blnValid = false;
                for (var j = 0; j < _validFileExtensions.length; j++) {
                    var sCurExtension = _validFileExtensions[j];
                    if (sFileName.substr(sFileName.length - sCurExtension.length, sCurExtension.length).toLowerCase() == sCurExtension.toLowerCase()) {
                        blnValid = true;
                        break;
                    }
                }

                if (!blnValid) {
                    alert(" File is invalid");
                    oInput.value = "";
                    return false;
                }

                // load file
                var image = document.getElementById('output');
                image.src = URL.createObjectURL(event.target.files[0]);
            }
        }

        return true;
    }

    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the current tab

    function showTab(n) {
        // This function will display the specified tab of the form...
        var x = document.getElementsByClassName("tab");
        x[n].style.display = "block";
        //... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            document.getElementById("nextBtn").innerHTML = "Submit";
        } else {
            document.getElementById("nextBtn").innerHTML = "Next";
        }
        //... and run a function that will display the correct step indicator:
        fixStepIndicator(n)
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("tab");
        // Exit the function if any field in the current tab is invalid:


       // if (n == 1 && !validateForm()) return false;


        // Hide the current tab:
        x[currentTab].style.display = "none";
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;
        // if you have reached the end of the form...
        if (currentTab >= x.length) {
            // ... the form gets submitted:
            $('#teamDetailForm').submit();

            return false;
        }
        // Otherwise, display the correct tab:
        showTab(currentTab);
    }

    function validateForm() {
        // This function deals with validation of the form fields
        var x, y, i, valid = true;
        x = document.getElementsByClassName("tab");
        y = x[currentTab].getElementsByTagName("input");
        // A loop that checks every input field in the current tab:
        for (i = 0; i < y.length; i++) {
            // If a field is empty...
            if (y[i].value == "") {
                // add an "invalid" class to the field:
                y[i].className += " invalid";
                // and set the current valid status to false
                valid = false;
            }
        }
        // If the valid status is true, mark the step as finished and valid:
        if (valid) {
            document.getElementsByClassName("step")[currentTab].className += " finish";
        }
        return valid; // return the valid status
    }

    function fixStepIndicator(n) {
        // This function removes the "active" class of all steps...
        var i, x = document.getElementsByClassName("step");
        for (i = 0; i < x.length; i++) {
            x[i].className = x[i].className.replace(" active", "");
        }
        //... and adds the "active" class on the current step:
        x[n].className += " active";
    }
</script>